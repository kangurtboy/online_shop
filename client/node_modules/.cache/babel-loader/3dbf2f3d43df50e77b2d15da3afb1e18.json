{"ast":null,"code":"import { guestInstance, authInstance } from './index.js';\nimport jwtDecode from 'jwt-decode';\nexport const signup = async (email, password) => {\n  try {\n    const response = await guestInstance.post('user/signup', {\n      email,\n      password,\n      role: 'USER'\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem('token', token);\n    return user;\n  } catch (e) {\n    alert(e.response.data.message);\n    return false;\n  }\n};\nexport const login = async (email, password) => {\n  try {\n    const response = await guestInstance.post('user/login', {\n      email,\n      password\n    });\n    const token = response.data.token;\n    const user = jwtDecode(token);\n    localStorage.setItem('token', token);\n    return user;\n  } catch (e) {\n    alert(e.response.data.message);\n    return false;\n  }\n};\nexport const logout = () => {\n  localStorage.removeItem('token');\n};\nexport const check = async () => {\n  let userToken, userData;\n\n  try {\n    let userToken = localStorage.getItem('token'); // если в хранилище нет действительного токена\n\n    if (!userToken) {\n      return false;\n    } // токен есть, надо проверить его подлинность\n\n\n    const response = await authInstance.get('user/check');\n    userToken = response.data.token;\n    userData = jwtDecode(userToken);\n    localStorage.setItem('token', userToken);\n    return userData;\n  } catch (e) {\n    localStorage.removeItem('token');\n    return false;\n  }\n};","map":{"version":3,"sources":["D:/RaDaR/React/online/shop/client.v1/src/http/userAPI.js"],"names":["guestInstance","authInstance","jwtDecode","signup","email","password","response","post","role","token","data","user","localStorage","setItem","e","alert","message","login","logout","removeItem","check","userToken","userData","getItem","get"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,YAAxB,QAA4C,YAA5C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAO,MAAMC,MAAM,GAAG,OAAOC,KAAP,EAAcC,QAAd,KAA2B;AAC7C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,aAAa,CAACO,IAAd,CAAmB,aAAnB,EAAkC;AAACH,MAAAA,KAAD;AAAQC,MAAAA,QAAR;AAAkBG,MAAAA,IAAI,EAAE;AAAxB,KAAlC,CAAvB;AACA,UAAMC,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcD,KAA5B;AACA,UAAME,IAAI,GAAGT,SAAS,CAACO,KAAD,CAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,KAA9B;AACA,WAAOE,IAAP;AACH,GAND,CAME,OAAOG,CAAP,EAAU;AACRC,IAAAA,KAAK,CAACD,CAAC,CAACR,QAAF,CAAWI,IAAX,CAAgBM,OAAjB,CAAL;AACA,WAAO,KAAP;AACH;AACJ,CAXM;AAaP,OAAO,MAAMC,KAAK,GAAG,OAAOb,KAAP,EAAcC,QAAd,KAA2B;AAC5C,MAAI;AACA,UAAMC,QAAQ,GAAG,MAAMN,aAAa,CAACO,IAAd,CAAmB,YAAnB,EAAiC;AAACH,MAAAA,KAAD;AAAQC,MAAAA;AAAR,KAAjC,CAAvB;AACA,UAAMI,KAAK,GAAGH,QAAQ,CAACI,IAAT,CAAcD,KAA5B;AACA,UAAME,IAAI,GAAGT,SAAS,CAACO,KAAD,CAAtB;AACAG,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,KAA9B;AACA,WAAOE,IAAP;AACH,GAND,CAME,OAAOG,CAAP,EAAU;AACRC,IAAAA,KAAK,CAACD,CAAC,CAACR,QAAF,CAAWI,IAAX,CAAgBM,OAAjB,CAAL;AACA,WAAO,KAAP;AACH;AACJ,CAXM;AAaP,OAAO,MAAME,MAAM,GAAG,MAAM;AACxBN,EAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACH,CAFM;AAIP,OAAO,MAAMC,KAAK,GAAG,YAAY;AAC7B,MAAIC,SAAJ,EAAeC,QAAf;;AACA,MAAI;AACA,QAAID,SAAS,GAAGT,YAAY,CAACW,OAAb,CAAqB,OAArB,CAAhB,CADA,CAEA;;AACA,QAAI,CAACF,SAAL,EAAgB;AACZ,aAAO,KAAP;AACH,KALD,CAMA;;;AACA,UAAMf,QAAQ,GAAG,MAAML,YAAY,CAACuB,GAAb,CAAiB,YAAjB,CAAvB;AACAH,IAAAA,SAAS,GAAGf,QAAQ,CAACI,IAAT,CAAcD,KAA1B;AACAa,IAAAA,QAAQ,GAAGpB,SAAS,CAACmB,SAAD,CAApB;AACAT,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BQ,SAA9B;AACA,WAAOC,QAAP;AACH,GAZD,CAYE,OAAMR,CAAN,EAAS;AACPF,IAAAA,YAAY,CAACO,UAAb,CAAwB,OAAxB;AACA,WAAO,KAAP;AACH;AACJ,CAlBM","sourcesContent":["import { guestInstance, authInstance } from './index.js'\r\nimport jwtDecode from 'jwt-decode'\r\n\r\nexport const signup = async (email, password) => {\r\n    try {\r\n        const response = await guestInstance.post('user/signup', {email, password, role: 'USER'})\r\n        const token = response.data.token\r\n        const user = jwtDecode(token)\r\n        localStorage.setItem('token', token)\r\n        return user\r\n    } catch (e) {\r\n        alert(e.response.data.message)\r\n        return false\r\n    }\r\n}\r\n\r\nexport const login = async (email, password) => {\r\n    try {\r\n        const response = await guestInstance.post('user/login', {email, password})\r\n        const token = response.data.token\r\n        const user = jwtDecode(token)\r\n        localStorage.setItem('token', token)\r\n        return user\r\n    } catch (e) {\r\n        alert(e.response.data.message)\r\n        return false\r\n    }\r\n}\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem('token')\r\n}\r\n\r\nexport const check = async () => {\r\n    let userToken, userData\r\n    try {\r\n        let userToken = localStorage.getItem('token')\r\n        // если в хранилище нет действительного токена\r\n        if (!userToken) {\r\n            return false\r\n        }\r\n        // токен есть, надо проверить его подлинность\r\n        const response = await authInstance.get('user/check')\r\n        userToken = response.data.token\r\n        userData = jwtDecode(userToken)\r\n        localStorage.setItem('token', userToken)\r\n        return userData\r\n    } catch(e) {\r\n        localStorage.removeItem('token')\r\n        return false\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}