{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport { CLEANUP_TIMER_LOOP_MILLIS, createTrackingData } from \"./reactionCleanupTrackingCommon\";\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\n\nexport function createTimerBasedReactionCleanupTracking() {\n  /**\r\n   * Reactions created by components that have yet to be fully mounted.\r\n   */\n  var uncommittedReactionRefs = new Set();\n  /**\r\n   * Latest 'uncommitted reactions' cleanup timer handle.\r\n   */\n\n  var reactionCleanupHandle;\n  /* istanbul ignore next */\n\n  /**\r\n   * Only to be used by test functions; do not export outside of mobx-react-lite\r\n   */\n\n  function forceCleanupTimerToRunNowForTests() {\n    // This allows us to control the execution of the cleanup timer\n    // to force it to run at awkward times in unit tests.\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      cleanUncommittedReactions();\n    }\n  }\n  /* istanbul ignore next */\n\n\n  function resetCleanupScheduleForTests() {\n    var e_1, _a;\n\n    if (uncommittedReactionRefs.size > 0) {\n      try {\n        for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {\n          var ref = uncommittedReactionRefs_1_1.value;\n          var tracking = ref.current;\n\n          if (tracking) {\n            tracking.reaction.dispose();\n            ref.current = null;\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      uncommittedReactionRefs.clear();\n    }\n\n    if (reactionCleanupHandle) {\n      clearTimeout(reactionCleanupHandle);\n      reactionCleanupHandle = undefined;\n    }\n  }\n\n  function ensureCleanupTimerRunning() {\n    if (reactionCleanupHandle === undefined) {\n      reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);\n    }\n  }\n\n  function scheduleCleanupOfReactionIfLeaked(ref) {\n    uncommittedReactionRefs.add(ref);\n    ensureCleanupTimerRunning();\n  }\n\n  function recordReactionAsCommitted(reactionRef) {\n    uncommittedReactionRefs.delete(reactionRef);\n  }\n  /**\r\n   * Run by the cleanup timer to dispose any outstanding reactions\r\n   */\n\n\n  function cleanUncommittedReactions() {\n    reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older\n    // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\n\n    var now = Date.now();\n    uncommittedReactionRefs.forEach(function (ref) {\n      var tracking = ref.current;\n\n      if (tracking) {\n        if (now >= tracking.cleanAt) {\n          // It's time to tidy up this leaked reaction.\n          tracking.reaction.dispose();\n          ref.current = null;\n          uncommittedReactionRefs.delete(ref);\n        }\n      }\n    });\n\n    if (uncommittedReactionRefs.size > 0) {\n      // We've just finished a round of cleanups but there are still\n      // some leak candidates outstanding.\n      ensureCleanupTimerRunning();\n    }\n  }\n\n  return {\n    addReactionToTrack: function (reactionTrackingRef, reaction,\n    /**\r\n     * On timer based implementation we don't really need this object,\r\n     * but we keep the same api\r\n     */\n    objectRetainedByReact) {\n      reactionTrackingRef.current = createTrackingData(reaction);\n      scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);\n      return reactionTrackingRef.current;\n    },\n    recordReactionAsCommitted: recordReactionAsCommitted,\n    forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,\n    resetCleanupScheduleForTests: resetCleanupScheduleForTests\n  };\n}","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AACA,SAGIA,yBAHJ,EAIIC,kBAJJ,QAKO,iCALP;AAOA;;;;AAGA,OAAM,SAAUC,uCAAV,GAAiD;AACnD;;;AAGA,MAAMC,uBAAuB,GAA0D,IAAIC,GAAJ,EAAvF;AAEA;;;;AAGA,MAAIC,qBAAJ;AAEA;;AACA;;;;AAGA,WAASC,iCAAT,GAA0C;AACtC;AACA;AACA,QAAID,qBAAJ,EAA2B;AACvBE,kBAAY,CAACF,qBAAD,CAAZ;AACAG,+BAAyB;AAC5B;AACJ;AAED;;;AACA,WAASC,4BAAT,GAAqC;;;AACjC,QAAIN,uBAAuB,CAACO,IAAxB,GAA+B,CAAnC,EAAsC;;AAClC,aAAkB,mEAAuBC,8DAAzC,EAAyC,iCAAzC,EAAyCA,8DAAzC,EAA2C;AAAtC,cAAMC,GAAG,oCAAT;AACD,cAAMC,QAAQ,GAAGD,GAAG,CAACE,OAArB;;AACA,cAAID,QAAJ,EAAc;AACVA,oBAAQ,CAACE,QAAT,CAAkBC,OAAlB;AACAJ,eAAG,CAACE,OAAJ,GAAc,IAAd;AACH;AACJ;;;;;;;;;;;;;AACDX,6BAAuB,CAACc,KAAxB;AACH;;AAED,QAAIZ,qBAAJ,EAA2B;AACvBE,kBAAY,CAACF,qBAAD,CAAZ;AACAA,2BAAqB,GAAGa,SAAxB;AACH;AACJ;;AAED,WAASC,yBAAT,GAAkC;AAC9B,QAAId,qBAAqB,KAAKa,SAA9B,EAAyC;AACrCb,2BAAqB,GAAGe,UAAU,CAACZ,yBAAD,EAA4BR,yBAA5B,CAAlC;AACH;AACJ;;AAED,WAASqB,iCAAT,CACIT,GADJ,EACyD;AAErDT,2BAAuB,CAACmB,GAAxB,CAA4BV,GAA5B;AAEAO,6BAAyB;AAC5B;;AAED,WAASI,yBAAT,CACIC,WADJ,EACiE;AAE7DrB,2BAAuB,CAACsB,MAAxB,CAA+BD,WAA/B;AACH;AAED;;;;;AAGA,WAAShB,yBAAT,GAAkC;AAC9BH,yBAAqB,GAAGa,SAAxB,CAD8B,CAG9B;AACA;;AAEA,QAAMQ,GAAG,GAAGC,IAAI,CAACD,GAAL,EAAZ;AACAvB,2BAAuB,CAACyB,OAAxB,CAAgC,eAAG;AAC/B,UAAMf,QAAQ,GAAGD,GAAG,CAACE,OAArB;;AACA,UAAID,QAAJ,EAAc;AACV,YAAIa,GAAG,IAAIb,QAAQ,CAACgB,OAApB,EAA6B;AACzB;AACAhB,kBAAQ,CAACE,QAAT,CAAkBC,OAAlB;AACAJ,aAAG,CAACE,OAAJ,GAAc,IAAd;AACAX,iCAAuB,CAACsB,MAAxB,CAA+Bb,GAA/B;AACH;AACJ;AACJ,KAVD;;AAYA,QAAIT,uBAAuB,CAACO,IAAxB,GAA+B,CAAnC,EAAsC;AAClC;AACA;AACAS,+BAAyB;AAC5B;AACJ;;AAED,SAAO;AACHW,sBAAkB,EAAlB,UACIC,mBADJ,EAEIhB,QAFJ;AAGI;;;;AAIAiB,yBAPJ,EAOkC;AAE9BD,yBAAmB,CAACjB,OAApB,GAA8Bb,kBAAkB,CAACc,QAAD,CAAhD;AACAM,uCAAiC,CAACU,mBAAD,CAAjC;AACA,aAAOA,mBAAmB,CAACjB,OAA3B;AACH,KAbE;AAcHS,6BAAyB,2BAdtB;AAeHjB,qCAAiC,mCAf9B;AAgBHG,gCAA4B;AAhBzB,GAAP;AAkBH","names":["CLEANUP_TIMER_LOOP_MILLIS","createTrackingData","createTimerBasedReactionCleanupTracking","uncommittedReactionRefs","Set","reactionCleanupHandle","forceCleanupTimerToRunNowForTests","clearTimeout","cleanUncommittedReactions","resetCleanupScheduleForTests","size","uncommittedReactionRefs_1_1","ref","tracking","current","reaction","dispose","clear","undefined","ensureCleanupTimerRunning","setTimeout","scheduleCleanupOfReactionIfLeaked","add","recordReactionAsCommitted","reactionRef","delete","now","Date","forEach","cleanAt","addReactionToTrack","reactionTrackingRef","objectRetainedByReact"],"sources":["C:\\Users\\kangu\\OneDrive\\Рабочий стол\\full-online-shop\\client\\node_modules\\mobx-react-lite\\src\\utils\\createTimerBasedReactionCleanupTracking.ts"],"sourcesContent":["import { Reaction } from \"mobx\"\r\nimport {\r\n    ReactionCleanupTracking,\r\n    IReactionTracking,\r\n    CLEANUP_TIMER_LOOP_MILLIS,\r\n    createTrackingData\r\n} from \"./reactionCleanupTrackingCommon\"\r\n\r\n/**\r\n * timers, gc-style, uncommitted reaction cleanup\r\n */\r\nexport function createTimerBasedReactionCleanupTracking(): ReactionCleanupTracking {\r\n    /**\r\n     * Reactions created by components that have yet to be fully mounted.\r\n     */\r\n    const uncommittedReactionRefs: Set<React.MutableRefObject<IReactionTracking | null>> = new Set()\r\n\r\n    /**\r\n     * Latest 'uncommitted reactions' cleanup timer handle.\r\n     */\r\n    let reactionCleanupHandle: ReturnType<typeof setTimeout> | undefined\r\n\r\n    /* istanbul ignore next */\r\n    /**\r\n     * Only to be used by test functions; do not export outside of mobx-react-lite\r\n     */\r\n    function forceCleanupTimerToRunNowForTests() {\r\n        // This allows us to control the execution of the cleanup timer\r\n        // to force it to run at awkward times in unit tests.\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle)\r\n            cleanUncommittedReactions()\r\n        }\r\n    }\r\n\r\n    /* istanbul ignore next */\r\n    function resetCleanupScheduleForTests() {\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            for (const ref of uncommittedReactionRefs) {\r\n                const tracking = ref.current\r\n                if (tracking) {\r\n                    tracking.reaction.dispose()\r\n                    ref.current = null\r\n                }\r\n            }\r\n            uncommittedReactionRefs.clear()\r\n        }\r\n\r\n        if (reactionCleanupHandle) {\r\n            clearTimeout(reactionCleanupHandle)\r\n            reactionCleanupHandle = undefined\r\n        }\r\n    }\r\n\r\n    function ensureCleanupTimerRunning() {\r\n        if (reactionCleanupHandle === undefined) {\r\n            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS)\r\n        }\r\n    }\r\n\r\n    function scheduleCleanupOfReactionIfLeaked(\r\n        ref: React.MutableRefObject<IReactionTracking | null>\r\n    ) {\r\n        uncommittedReactionRefs.add(ref)\r\n\r\n        ensureCleanupTimerRunning()\r\n    }\r\n\r\n    function recordReactionAsCommitted(\r\n        reactionRef: React.MutableRefObject<IReactionTracking | null>\r\n    ) {\r\n        uncommittedReactionRefs.delete(reactionRef)\r\n    }\r\n\r\n    /**\r\n     * Run by the cleanup timer to dispose any outstanding reactions\r\n     */\r\n    function cleanUncommittedReactions() {\r\n        reactionCleanupHandle = undefined\r\n\r\n        // Loop through all the candidate leaked reactions; those older\r\n        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.\r\n\r\n        const now = Date.now()\r\n        uncommittedReactionRefs.forEach(ref => {\r\n            const tracking = ref.current\r\n            if (tracking) {\r\n                if (now >= tracking.cleanAt) {\r\n                    // It's time to tidy up this leaked reaction.\r\n                    tracking.reaction.dispose()\r\n                    ref.current = null\r\n                    uncommittedReactionRefs.delete(ref)\r\n                }\r\n            }\r\n        })\r\n\r\n        if (uncommittedReactionRefs.size > 0) {\r\n            // We've just finished a round of cleanups but there are still\r\n            // some leak candidates outstanding.\r\n            ensureCleanupTimerRunning()\r\n        }\r\n    }\r\n\r\n    return {\r\n        addReactionToTrack(\r\n            reactionTrackingRef: React.MutableRefObject<IReactionTracking | null>,\r\n            reaction: Reaction,\r\n            /**\r\n             * On timer based implementation we don't really need this object,\r\n             * but we keep the same api\r\n             */\r\n            objectRetainedByReact: unknown\r\n        ) {\r\n            reactionTrackingRef.current = createTrackingData(reaction)\r\n            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef)\r\n            return reactionTrackingRef.current\r\n        },\r\n        recordReactionAsCommitted,\r\n        forceCleanupTimerToRunNowForTests,\r\n        resetCleanupScheduleForTests\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}